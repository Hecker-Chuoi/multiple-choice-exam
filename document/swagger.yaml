openapi: "3.1.0"
info:
  title: Multiple-choice exam taking website
  contact:
    email: nguyentienht1910@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8080/exam
    description: Local server
tags:
  - name: auth
    description: Operations about authentication
  - name: user
    description: Operations about user
  - name: test
    description: Operations about test
  - name: session
    description: Operations about test session
paths:
  /auth/token:
    post:
      tags:
        - auth
      summary: Get access token
      description: Get access token
      operationId: getAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/AuthenticationResponse'

  /auth/introspect:
    post:
      tags:
        - auth
      summary: Introspect token
      description: Introspect token
      operationId: introspectToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntrospectRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/IntrospectResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /user/one:
    post:
      tags:
        - user
      summary: Create single user
      description: Create single user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /user/many:
    post:
      tags:
        - user
      summary: Upload an Excel file to create multiple users
      description: This API allows users to upload an Excel file containing user data. The system processes the file and returns a list of created users.
      operationId: createUsers
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel file containing user data
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /user/{username}:
    get:
      tags:
        - user
      summary: get user by username
      description: get user by username
      operationId: getUser
      parameters:
        - name: username
          in: path
          required: true
          description: username of user
          schema:
            type: string
            example: "nht997"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    result:
                        $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    put:
      tags:
        - user
      summary: Update user by username
      description: Update user by username
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          description: username of user
          schema:
              type: string
              example: "nht997"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      tags:
        - user
      summary: Delete user by username
      description: Delete user by username
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          description: username of user
          schema:
            type: string
            example: "nht997"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    result:
                      type: string
                      example: "success"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /user/myInfo:
    get:
      tags:
        - user
      summary: Get current login username's info
      operationId: getMyInfo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /user/candidates:
    get:
      tags:
        - user
      summary: Get all candidates
      operationId: getCandidates
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'

  /user/all:
    get:
      tags:
        - user
      summary: Get all user
      operationId: getAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'

  /test:
    post:
      tags:
        - test
      operationId: createTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCreationRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/TestResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /test/all:
    get:
      tags:
        - test
      operationId: getAllTests
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: array
                    items:
                      $ref: '#/components/schemas/TestResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /test/{testId}:
    parameters:
      - name: testId
        in: path
        required: true
        description: testId of test
        schema:
          type: string
          example: "52"
    get:
      tags:
        - test
      operationId: getTest
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/TestResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    put:
      tags:
        - test
      operationId: updateTest
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCreationRequest'
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/TestResponse'
          default:
            description: Unexpected error
            content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ApiResponse"
    delete:
      tags:
        - test
      operationId: deleteTest
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                properties:
                  result:
                    type: string
                    example: "success"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /test/valid?isDeleted={isDeleted}:
    get:
      tags:
        - test
      operationId: getValidTests
      parameters:
        - name: isDeleted
          in: path
          required: true
          description: isDeleted of test
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: array
                  items:
                    $ref: '#/components/schemas/TestResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /test/{testId}/restore:
    post:
      tags:
        - test
      operationId: restoreTest
      parameters:
        - name: testId
          in: path
          required: true
          description: testId of test
          schema:
            type: string
            example: "52"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    result:
                      type: string
                      example: "success"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"


  /test/{testId}/question:
    parameters:
      - name: testId
        in: path
        required: true
        description: testId of test
        schema:
          type: string
          example: "52"
    get:
      tags:
        - test
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    result:
                      type: array
                      items:
                        $ref: '#/components/schemas/Question'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    post:
      tags:
        - test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionCreationRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/Question'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /session:
    post:
      tags:
        - session
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreationRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/TestSession'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /session/{sessionId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        description: sessionId of session
        schema:
          type: string
          example: "52"
    get:
      tags:
        - session
      operationId: getSession
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                          $ref: '#/components/schemas/TestSession'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    put:
      tags:
        - session
      operationId: updateSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdateRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                          $ref: '#/components/schemas/TestSession'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    delete:
      tags:
        - session
      operationId: deleteSession
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                          type: string
                          example: "success"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/ApiResponse"

  /session/all:
    get:
      tags:
        - session
      operationId: getAllSessions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: array
                  items:
                    $ref: '#/components/schemas/TestSession'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /session/{sessionId}/test:
    parameters:
      - name: sessionId
        in: path
        required: true
        description: sessionId of session
        schema:
          type: string
          example: "52"
    get:
      tags:
        - session
      operationId: getTestOfSession
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/TestResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    put:
      tags:
        - session
      operationId: changeTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
              format: int64
              example: 2
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                properties:
                  result:
                    $ref: '#/components/schemas/TestSession'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /session/{sessionId}/candidates:
    parameters:
      - name: sessionId
        in: path
        required: true
        description: sessionId of session
        schema:
          type: string
          example: "52"
    get:
      tags:
        - session
      operationId: getCandidates
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: array
                  items:
                    $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    post:
      tags:
        - session
      operationId: addCandidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              example: ["nht997", "nht998"]
              items:
                format: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: string
                  example: "success"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          example: 100
        message:
          type: string
          example: Invalid input
        result:
          oneOf:
            - $ref: '#/components/schemas/AuthenticationResponse'
            - $ref: '#/components/schemas/IntrospectResponse'
            - $ref: '#/components/schemas/UserResponse'
            - $ref: '#/components/schemas/TestResponse'
            - $ref: '#/components/schemas/TestSession'
            - $ref: '#/components/schemas/Question'
            - type: string
              example: "success"
            - type: array
              items:
                $ref: '#/components/schemas/UserResponse'
            - type: array
              items:
                $ref: '#/components/schemas/TestResponse'
            - type: array
              items:
                $ref: '#/components/schemas/TestSession'
            - type: array
              items:
                $ref: '#/components/schemas/Question'

    #auth
    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
          example: "nht004"
        password:
          type: string
          example: "19102004"

    AuthenticationResponse:
      type: object
      properties:
        authenticated:
          type: boolean
          example: true
        token:
          type: string
          example: "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJtdWx0aXBsZS1jaG9pY2UgZXhhbSIsInN1YiI6ImFkbWluIiwiZXhwIjoxNzQyOTI3NDM5LCJpYXQiOjE3NDI5MjM4MzksInNjb3BlIjoiQURNSU4ifQ.pYMvBGPhjZX097lToh4_jrVgvo2pz3Y870LgAlVORLGFP3bJM3AuWil59QEUsF6UM4icwVl4eVxRQBRAjvar2A"

    IntrospectRequest:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJtdWx0aXBsZS1jaG9pY2UgZXhhbSIsInN1YiI6ImFkbWluIiwiZXhwIjoxNzQyODkyNDc2LCJpYXQiOjE3NDI4ODg4NzYsInNjb3BlIjoiQURNSU4ifQ.oJa4-3XNqpB9tslevQ4F22Zpj6-TRAv09gf4FilgAbeFO4kZZDxIp7a0KmAOE_rifs8_ng-iW19EynPbRd_f_g"

    IntrospectResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true

    #user
    UserCreationRequest:
      type: object
      properties:
        fullName:
          type: string
          example: "Nguyễn Hữu Tiến"
        dob:
          type: string
          example: "19/10/2004"
        gender:
          type: string
          example: "nam"
        phoneNumber:
          type: string
          example: "0932375416"
        mail:
          type: string
          example: "nguyentienht1910@gmail.com"
        unit:
          type: string
          example: "Pháo binh"
        hometown:
          type: string
          example: "Hà Tĩnh"

    UserUpdateRequest:
      type: object
      properties:
        dob:
          type: string
          example: "19/10/2004"
        gender:
          type: string
          example: "Nam"
        phoneNumber:
          type: string
          example: "0932375416"
        mail:
          type: string
          example: "nguyentienht1910@gmail.com"
        unit:
          type: string
          example: "Phao binh"
        hometown:
          type: string
          example: "Ha tinh"

    UserResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          example: "nht997"
        fullName:
          type: string
          example: "Nguyễn Hữu Tiến"
        dob:
          type: string
          format: "dd/MM/yyyy"
          example: "19/10/2004"
        gender:
          type: string
          example: "Nam"
        phoneNumber:
          type: string
          example: "0933275416"
        mail:
          type: string
          example: "nguyentienht1910@gmail.com"
        unit:
          type: string
          example: "Pháo binh"
        hometown:
          type: string
          example: "Hà Tĩnh"

    #test
    TestCreationRequest:
      type: object
      properties:
        testName:
          type: string
          example: "Đề thi kết thúc học phần"
        subject:
          type: string
          example: "Giải tích 1"

    TestResponse:
      type: object
      properties:
        testId:
          type: string
          example: ""
        testName:
          type: string
          example: ""
        subject:
          type: string
          example: ""
        editedTime:
          type: string
          example: ""
        isDeleted:
          type: string
          example: ""
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          example: ""

    #question
    QuestionCreationRequest:
      type: object
      properties:
        questionText:
          type: string
          example: ""
        explainText:
          type: string
          example: ""
        questionType:
          type: string
          example: ""
        answerCreationRequests:
          type: array
          items:
            $ref: '#/components/schemas/AnswerCreationRequest'
          example:
            '[
              {
                  "answerText": "A",
                  "isCorrect": true
              },
              {
                  "answerText": "B",
                  "isCorrect": false
              },
              {
                  "answerText": "C",
                  "isCorrect": false
              },
              {
                  "answerText": "D",
                  "isCorrect": false
              }
            ]'

    Question:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
          example: ""
        questionText:
          type: string
          example: ""
        explainText:
          type: string
          example: ""
        questionType:
          type: string
          example: ""
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerCreationRequest'
          example: ""

    #answer
    AnswerCreationRequest:
      type: object
      properties:
        answerText:
          type: string
          example: "Docker image là một file chứa tất cả các thông tin cần thiết để tạo ra một container"
        isCorrect:
          type: boolean
          example: true

    #session
    SessionCreationRequest:
      type: object
      properties:
        testId:
          type: integer
          format: int64
          example: ""
        startTime:
          type: string
          example: ""
        timeLimit:
          type: string
          example: ""

    SessionUpdateRequest:
      type: object
      properties:
        startTime:
          type: string
          example: "31/3/2025 20:00"
        timeLimit:
          type: string
          example: "120"

    TestSession:
      type: object
      properties:
        sessionId:
          type: string
          example: ""
        lastEditTime:
          type: string
          example: ""
        startTime:
          type: string
          example: ""
        timeLimit:
          type: string
          example: ""
        isDeleted:
          type: boolean
          example: true

  securitySchemes:
    bearerAuth:
      description: JWT token has following payload [subject(username), issuer("multiple-choice exam"), issueTime(time created token), scope(ADMIN/CANDIDATE)]
      type: http
      scheme: bearer
      bearerFormat: JWT